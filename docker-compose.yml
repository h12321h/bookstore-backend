version: '3.9'

services:
  # Eureka 服务注册中心
  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: Dockerfile
    container_name: eureka-server
    ports:
      - "8761:8761"
    depends_on:
      - zookeeper
      - kafka
      - mysql
      - redis
      - mongo
      - neo4j
    environment:
      - eureka.client.register-with-eureka=false
      - eureka.client.fetch-registry=false
    networks:
      - ebook-network

  # 网关服务
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    container_name: gateway
    ports:
      - "8080:8080"
    depends_on:
      - eureka-server
    networks:
      - ebook-network

  # 主服务
  main-service:
    build:
      context: ./main-service
      dockerfile: Dockerfile
    container_name: main-service
    ports:
      - "8090:8090"
    depends_on:
      - eureka-server
      - zookeeper
      - redis
      - mongo
      - mysql
      - kafka
      - neo4j
      - gateway
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/BOOKSTORE
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 12321hh
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SPRING_REDIS_HOST: redis
      SPRING_REDIS_PORT: 6379
      SPRING_DATA_MONGODB_URI: mongodb://mongo:27017/bookstore
      SPRING_NEO4J_URI: bolt://neo4j:7687
      SPRING_NEO4J_AUTHENTICATION_USERNAME: neo4j
      SPRING_NEO4J_AUTHENTICATION_PASSWORD: 123212321hh
#    volumes:
#      - ./book-descriptions:/app/data
    networks:
      - ebook-network

#  spark-service:
#    build:
#      context: spark-service
#      dockerfile: Dockerfile
#    container_name: spark-service
#    ports:
#      - "8093:8093"
#    depends_on:
#      - eureka-server
#      - gateway
#    volumes:
#      - ./book-descriptions:/app/data
#    networks:
#      - ebook-network


  # 作者服务
  author-service:
    build:
      context: ./author-service
      dockerfile: Dockerfile
    container_name: author-service
    ports:
      - "8091:8091"
    depends_on:
      - eureka-server
      - gateway
      - mysql
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/BOOKSTORE
      SPRING_DATASOURCE_USERNAME: root
      SPRING_DATASOURCE_PASSWORD: 12321hh
    networks:
      - ebook-network

  # 功能服务
  function-service:
    build:
      context: ./function-service
      dockerfile: Dockerfile
    container_name: function-service
    ports:
      - "8092:8092"
    depends_on:
      - eureka-server
      - gateway
    networks:
      - ebook-network


  # MySQL 数据库
  mysql:
    image: mysql:8.0
    container_name: mysql
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: 12321hh
      MYSQL_DATABASE: BOOKSTORE
#    volumes:
#      - mysql_data:/var/lib/mysql
    volumes:
      - ./mysql_data:/var/lib/mysql
    networks:
      - ebook-network

  # Redis 缓存
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6370:6379"
    networks:
      - ebook-network

  # MongoDB 数据库
  mongo:
    image: mongo:latest
    container_name: mongo
    ports:
      - "27018:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - ebook-network

  # Neo4j 图数据库
  neo4j:
    image: neo4j:latest
    container_name: neo4j
    ports:
      - "7688:7687"
      - "7475:7474"
    environment:
      NEO4J_AUTH: neo4j/123212321hh
    volumes:
      - neo4j_data:/data
    networks:
      - ebook-network

  # Kafka 消息队列
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    depends_on:
      - zookeeper
    networks:
      - ebook-network

  # Zookeeper 服务
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - ebook-network

volumes:
  mysql_data:
  mongo_data:
  neo4j_data:

networks:
  ebook-network:
    driver: bridge

# docker-compose up --build